using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;
using UnityEngine.Playables;

public enum CharacterType
{
    None,
    William,
    Kinki
}

namespace OpenAI
{
    public class ChatGPT : MonoBehaviour
    {
        [SerializeField] private InputField inputField;
        [SerializeField] private Button button;
        [SerializeField] private ScrollRect scroll;
        
        [SerializeField] private RectTransform sent;
        [SerializeField] private RectTransform received;

        private float height;
        private OpenAIApi openai = new OpenAIApi();

        private List<ChatMessage> messages = new List<ChatMessage>();

        CharacterType npcType = CharacterType.None;
        public CharacterType NPCType { get { return npcType; } set { npcType = value; } }
        

        private string prompt_william = "아래 컨셉에 맞게 대화해줘. 아래는 너의 특징이야." +
            " \"{이름:윌리엄,직업:농부,성별:남자,나이:23,외모: 수수한 외모,성격:온화함,특징1:친절하지만 잘못된 행동을 굉장히 싫어한다. 특징2:농장일 외에는 관심이 별로 없다. 특징3: 친하지 않을 때는 무뚝뚝하고 말이 짧다. 특징4: 항상 일하는 중이며 자신을 방해하는 것을 싫어한다. } " +
            "25글자 이내로 대답해줘"+"자기소개는 하지 말고 자연스럽게 대화만 해 줘";

        private string prompt_kinki = "너는 아래의 특징을 가진 캐릭터이고 상대방(나)와 대화중이야. 아래는 너의 특징이라는 점을 명심해. "
            + "자기소개 하지마. 정보를 나열하지는 마. 1~2문장으로만 말해."
            + "호감도가 낮으면 낯선 사람을 대하듯이, 호감도가 높을수록 더 친밀하게 대화해줘. 자연스럽게 대화만 짧게 해.아래는 너의 특징이야. \n\n" +
            "{이름: 킨키, 직업: 음식 방송 유튜버, 성별: 여성, 나이: 불명 (17세라고 주장),성격1: 귀여움, 성격2: 장난치는 것을 좋아함, " +
            "성격3: 일을할때에는 신중함, 좋아하는 것: 수제 햄버거, 싫어하는 것: 커피, 어투: 항상 반말을 한다. " +
            "어투 예시: 햄부거 좋아~, 으앙~,,고려사항: 모든 햄버거는 햄부거라고 말한다. 햄버거 먹으러 혼자 식당에 가고 있는 중, 상황 : 대화상대와 처음 만남. 상대방과의 호감도 0% }";

        
        private void Start()
        {
            button.onClick.AddListener(SendReply);
        }

        void Update()
        {
            // Enter키 동작
            if (Input.GetKeyDown(KeyCode.Return) && inputField.GetComponent<InputField>().text.Length > 0)
            {
                SendReply();
            }
        }

        public void ResetDialogs()
        {
            Transform contentObject = scroll.gameObject.transform.GetChild(0).GetChild(0);
            int size = contentObject.childCount;
            for (int i = 0; i < size; i++)
            {
                Destroy(contentObject.GetChild(i).gameObject);
            }
        }

        private void AppendMessage(ChatMessage message)
        {
            scroll.content.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, 0);

            var item = Instantiate(message.Role == "user" ? sent : received, scroll.content);
            item.GetChild(0).GetChild(0).GetComponent<Text>().text = message.Content;
            item.anchoredPosition = new Vector2(0, -height);
            LayoutRebuilder.ForceRebuildLayoutImmediate(item);
            height += item.sizeDelta.y;
            scroll.content.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, height);
            scroll.verticalNormalizedPosition = 0;
            
        }

        private async void SendReply()
        {
            var newMessage = new ChatMessage()
            {
                Role = "user",
                Content = inputField.text
            };
            
            AppendMessage(newMessage);

            if (messages.Count == 0)
            {
                switch(npcType)
                {
                    case CharacterType.None:
                        break;
                    case CharacterType.William:
                        newMessage.Content = prompt_william + "\n" + inputField.text;
                        break;
                    case CharacterType.Kinki:
                        newMessage.Content = prompt_kinki + "\n" + inputField.text;
                        break;

                }

                
            }
            messages.Add(newMessage);
            
            button.enabled = false;
            inputField.text = "";
            inputField.enabled = false;
            
            // Complete the instruction
            var completionResponse = await openai.CreateChatCompletion(new CreateChatCompletionRequest()
            {
                Model = "gpt-3.5-turbo-0613",
                Messages = messages
            });

            if (completionResponse.Choices != null && completionResponse.Choices.Count > 0)
            {
                var message = completionResponse.Choices[0].Message;
                message.Content = message.Content.Trim();
                
                messages.Add(message);
                AppendMessage(message);
            }
            else
            {
                Debug.LogWarning("No text was generated from this prompt.");
            }

            button.enabled = true;
            inputField.enabled = true;
        }
    }
}
